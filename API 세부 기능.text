-------------------------------------------- 로그인  --------------------------------------------
 # 클라이언트로부터 요청(request body에 데이터가 포함 되어 있음)

1. request body의 데이터가 유효한 데이터 인지 확인
1.1 만약 유효하지 않은 데이터면 'VF' 응답 처리

(userId, userPassword)

2. 데이터베이스의 user 테이블에서 userId에 해당하는 유저 레코드 조회
select* from user where userId = :userId and userPassword = :userPassword  -> 데이터베이스 테이블에 암호화된 비밀번호를 저장하고 있기 때문에 실제 테이블 레코드를 꺼내와서 평문화를 한 후 비교 작업을 추가로 진행 

	
	
-------------------------------------------- 아이디 중복확인  --------------------------------------------
 # 클라이언트로부터 요청(request body에 데이터가 포함 되어 있음)

1. request body의 데이터가 유효한 데이터 인지 확인
1.1 만약 유효하지 않은 데이터면 'VF' 응답 처리   (userId)

2. 데이터 베이스의 user 테이블에서 해당하는 userId를 가지고 있는 유저가 있는지 확인
2.1 만약 가지고 있는 유저가 존재하면 'DI' 응답 처리 
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

3. 'SU' 응답 처리

-------------------------------------------- 이메일 인증  --------------------------------------------
 # 클라이언트로부터 요청(request body에 데이터가 포함 되어 있음)

1. request body의 데이터가 유효한 데이터 인지 확인
1.1 만약 유효하지 않은 데이터면 'VF' 응답 처리   (userEmail)

2. 데이터 베이스의 user 테이블에서 해당하는 userEmail를 가지고 있는 유저가 있는지 확인
2.1 만약 가지고 있는 유저가 존재하면 'DE' 응답 처리 
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

3. 4자리의 인증 번호를 생성

4. 데이터베이스의 email_auth_number 테이블에 userEmail과 생성한 4자리의 인증 번호를 저장 
4.1 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

5. userEmail에 생성한 4자리의 인증 번호를 전송
5.1 만약 이메일 전송 중에 에러가 발생하면
     데이터 베이스의 email_auth_number 테이블에 저장한 데이터를 삭제
5.2 만약 이메일 전송 중에 에러가 발생하면 'MF' 응답 처리

6. 'SU' 응답 처리

-------------------------------------------- 이메일 인증 확인  --------------------------------------------
# 클라이언트로부터 요청(request body에 데이터가 포함 되어 있음)

1. request body의 데이터가 유효한 데이터 인지 확인
1.1 만약 유효하지 않은 데이터면 'VF' 응답 처리  (userEmail, authNumber)

2. 데이터베이스의 email_auth_number 테이블에서 해당하는 userEmail과 authNumber를 모두 가지고 있는 데이터가 있는지 확인
2-1. 해당하는 데이터가 없다면 'AF' 응답 처리 
2-2. 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리 

3. 'SU' 응답 처리 

-------------------------------------------- 회원가입  --------------------------------------------

# 클라이언트로부터 요청(request body에 데이터가 포함 되어 있음)

1. request body의 데이터가 유효한 데이터 인지 확인
1.1 만약 유효하지 않은 데이터면 'VF' 응답 처리  (userId, userPassword, userEmail, authNumber)

2. 데이터 베이스의 user 테이블에서 해당하는 userId를 가지고 있는 유저가 있는지 확인
2.1 만약 가지고 있는 유저가 존재하면 'DI' 응답 처리 
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

3. 데이터 베이스의 user 테이블에서 해당하는 userEmail를 가지고 있는 유저가 있는지 확인
3.1 만약 가지고 있는 유저가 존재하면 'DE' 응답 처리 
3.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

4. 데이터베이스의 email_auth_number 테이블에서 해당하는 userEmail과 authNumber를 모두 가지고 있는 데이터가 있는지 확인
4-1. 해당하는 데이터가 없다면 'AF' 응답 처리 
4-2. 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리 

5. 사용자로부터 입력받은 userPassword를 암호화

6. 사용자로부터 입력받은 userId, userEmail과 암호화한 password, 지정된 권한, 가입 경로를 사용하여 레코드를 삽입
6.1 만약 데이터베이스 작업 중 에러가 발생하면  'DBE' 응답 처리 

7. 'SU' 응답 처리 